// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "12/18/2018 22:48:52"
                                                                                
// Verilog Test Bench template for design : cpu_bus
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module cpu_bus_vlg_tst();
// constants                    
// test vector input registers
reg EN_N;
reg [1:0] WLEN;
reg [31:0] address;
reg clk;
reg [31:0] wdata;
// wires           
wire READY;
wire [31:0]  rdata;
wire [2:0] bus_state;
wire [15:0] cache_rdata;
wire global_wen;
wire cache_en;
wire cache_wen;
wire [15:0] selected_rdata;
wire [31:0] addr_offset;
wire [15:0] wdata16;
wire [31:0] vgac_addr;
// assign statements (if any)                          
cpu_bus i1 (
// port map - connection between master ports and signals/registers
	.vgac_addr(vgac_addr),
	.wdata16(wdata16),
	.selected_rdata(selected_rdata),
	.addr_offset(addr_offset),
	.global_wen(global_wen),
	.cache_en(cache_en),
	.cache_wen(cache_wen),
	.cache_rdata(cache_rdata),
	.bus_state(bus_state),
	.EN_N(EN_N),
	.READY(READY),
	.WLEN(WLEN),
	.address(address),
	.clk(clk),
	.rdata(rdata),
	.wdata(wdata)
);
initial
begin
	clk = 0; EN_N = 0; address = 32'h812CC;
	WLEN = 2'b11; wdata = 32'h12344321;
	#15 EN_N = 1;
	// #40; EN_N = 0; WLEN = 2'b11; wdata = 32'habcddcba;
	// address = 32'h812C2;
	// #15 EN_N = 1;
	#40; EN_N = 0; WLEN = 2'b11; wdata = 32'h56788765;
	address = 32'h0;
	#15 EN_N = 1;
	// #40; EN_N = 0; WLEN = 2'b01; wdata = 32'h9999abcd;
	// address = 32'h812C3;
	// #15 EN_N = 1;
	#40; EN_N = 0; WLEN = 2'b00; address = 32'h812CE;
	#15 EN_N = 1;
	#40; EN_N = 0; WLEN = 2'b00; address = 32'h812CC;
	#15 EN_N = 1;
	#40; EN_N = 0; WLEN = 2'b00; address = 32'h812C0;
	#15 EN_N = 1;
	#40;
$stop;
$display("Running testbench");                       
end                                                    
always
begin
	#5 clk = ~clk;
end
endmodule
