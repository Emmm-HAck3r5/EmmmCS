// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/28/2018 20:22:59"
                                                                                
// Verilog Test Bench template for design : cpu_gregs
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module cpu_gregs_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg clk;
reg [31:0] rd_dat;
reg [4:0] rd_idx;
reg rd_wen;
reg reset_n;
reg [4:0] rs1_idx;
reg [4:0] rs2_idx;
// wires                                               
wire [31:0]  rs1_dat;
wire [31:0]  rs2_dat;

// assign statements (if any)                          
cpu_gregs i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.rd_dat(rd_dat),
	.rd_idx(rd_idx),
	.rd_wen(rd_wen),
	.reset_n(reset_n),
	.rs1_dat(rs1_dat),
	.rs1_idx(rs1_idx),
	.rs2_dat(rs2_dat),
	.rs2_idx(rs2_idx)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
	reset_n = 0;clk=0;#5;
	reset_n = 1;#5;
	rs1_idx = 5'h0;rs2_idx = 5'h2;rd_idx = 5'h0;rd_wen = 1'b1;rd_dat = 32'ha;#20;
	rd_idx = 5'h2;#20;
	rs2_idx=5'h2;rd_dat = 32'hb;#20;
	$stop;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
	#2 clk = ~clk;
// --> end                                             
end                                                    
endmodule

