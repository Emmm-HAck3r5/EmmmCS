// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/27/2018 16:18:21"
                                                                                
// Verilog Test Bench template for design : cpu_alu
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ps/ 1 ps
module cpu_alu_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg RST;
reg clk;
reg [3:0] select;
reg [31:0] src_A;
reg [31:0] src_B;
// wires                                               
wire READY;
wire [31:0]  dest;
wire [3:0]  flags;

`define	ADD_FUNC		4'b0000
`define	SUB_FUNC		4'b0001
`define	AND_FUNC		4'b0010
`define	OR_FUNC		4'b0011
`define	XOR_FUNC		4'b0100
`define	SLL_FUNC		4'b0101
`define	SRL_FUNC		4'b0110
`define	SRA_FUNC		4'b0111
`define	MUL_FUNC		4'b1000
`define	MULU_FUNC	4'b1001
`define	MULSU_FUNC	4'b1010
`define	DIV_FUNC		4'b1011
`define	DIVU_FUNC	4'b1100
`define	REM_FUNC		4'b1101
`define	REMU_FUNC	4'b1110
`define	NOP_FUNC		4'b1111

// assign statements (if any)                          
cpu_alu i1 (
// port map - connection between master ports and signals/registers   
	.READY(READY),
	.RST(RST),
	.clk(clk),
	.dest(dest),                                                                                  
	.flags(flags),
	.select(select),
	.src_A(src_A),
	.src_B(src_B)
);
initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin
	clk = 0; select = `SRA_FUNC;
	src_A = 32'hf2345678;
	src_B = 32'h00000003;
	RST = 0; #10;
	RST = 1; #10;
	RST = 0; #100;
$stop;
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
   #1 clk = ~clk;                                           
// --> end                                             
end                                                    
endmodule

